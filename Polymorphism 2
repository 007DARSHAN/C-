#include <iostream>

// Base class
class Shape {
public:
    // Virtual function for polymorphism
    virtual void draw() const {
        std::cout << "Drawing a shape." << std::endl;
    }

    // Virtual destructor
    virtual ~Shape() {}
};

// Derived class
class Circle : public Shape {
public:
    void draw() const override {
        std::cout << "Drawing a circle." << std::endl;
    }
};

// Another derived class
class Square : public Shape {
public:
    void draw() const override {
        std::cout << "Drawing a square." << std::endl;
    }
};

int main() {
    Shape* shape1 = new Circle();
    Shape* shape2 = new Square();

    shape1->draw();  // Outputs: Drawing a circle.
    shape2->draw();  // Outputs: Drawing a square.

    delete shape1;
    delete shape2;

    return 0;
}
